apiVersion: v1
kind: Namespace
metadata:
  name: online-boutique
  labels:
    app: online-boutique

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: boutique-config
  namespace: online-boutique
data:
  MCP_SERVER_URL: "http://mcp-server"
  PRODUCT_MANAGER_URL: "http://product-manager"
  CUSTOMER_SERVICE_URL: "http://customer-service"
  PAYMENT_PROCESSOR_URL: "http://payment-processor"
  SHIPPING_SERVICE_URL: "http://shipping-service"
  CATALOG_SERVICE_URL: "http://catalog-service"

---
# Secret for sensitive data - values will be injected from .env file during deployment
apiVersion: v1
kind: Secret
metadata:
  name: boutique-secrets
  namespace: online-boutique
type: Opaque
stringData:
  GOOGLE_API_KEY: "${GOOGLE_API_KEY}"  # Will be read from environment
  PROJECT_ID: "${PROJECT_ID}"         # Will be read from environment
  IMAGE_TAG: "${IMAGE_TAG}"           # Will be read from environment

---
# MCP Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-server
  namespace: online-boutique
  labels:
    app: mcp-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mcp-server
  template:
    metadata:
      labels:
        app: mcp-server
    spec:
      containers:
      - name: mcp-server
        image: "gcr.io/${PROJECT_ID}/online-boutique:${IMAGE_TAG}"
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_TYPE
          value: "mcp-server"
        - name: PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: boutique-config
        - secretRef:
            name: boutique-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# MCP Server Service
apiVersion: v1
kind: Service
metadata:
  name: mcp-server
  namespace: online-boutique
spec:
  selector:
    app: mcp-server
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# Product Manager Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-manager
  namespace: online-boutique
  labels:
    app: product-manager
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-manager
  template:
    metadata:
      labels:
        app: product-manager
    spec:
      containers:
      - name: product-manager
        image: "gcr.io/${PROJECT_ID}/online-boutique:${IMAGE_TAG}"
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_TYPE
          value: "product-manager"
        - name: PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: boutique-config
        - secretRef:
            name: boutique-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Product Manager Service
apiVersion: v1
kind: Service
metadata:
  name: product-manager
  namespace: online-boutique
spec:
  selector:
    app: product-manager
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# Customer Service Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-service
  namespace: online-boutique
  labels:
    app: customer-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: customer-service
  template:
    metadata:
      labels:
        app: customer-service
    spec:
      containers:
      - name: customer-service
        image: "gcr.io/${PROJECT_ID}/online-boutique:${IMAGE_TAG}"
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_TYPE
          value: "customer-service"
        - name: PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: boutique-config
        - secretRef:
            name: boutique-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Customer Service Service
apiVersion: v1
kind: Service
metadata:
  name: customer-service
  namespace: online-boutique
spec:
  selector:
    app: customer-service
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# Payment Processor Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-processor
  namespace: online-boutique
  labels:
    app: payment-processor
spec:
  replicas: 2
  selector:
    matchLabels:
      app: payment-processor
  template:
    metadata:
      labels:
        app: payment-processor
    spec:
      containers:
      - name: payment-processor
        image: "gcr.io/${PROJECT_ID}/online-boutique:${IMAGE_TAG}"
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_TYPE
          value: "payment-processor"
        - name: PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: boutique-config
        - secretRef:
            name: boutique-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Payment Processor Service
apiVersion: v1
kind: Service
metadata:
  name: payment-processor
  namespace: online-boutique
spec:
  selector:
    app: payment-processor
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# Shipping Service Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping-service
  namespace: online-boutique
  labels:
    app: shipping-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: shipping-service
  template:
    metadata:
      labels:
        app: shipping-service
    spec:
      containers:
      - name: shipping-service
        image: "gcr.io/${PROJECT_ID}/online-boutique:${IMAGE_TAG}"
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_TYPE
          value: "shipping-service"
        - name: PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: boutique-config
        - secretRef:
            name: boutique-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Shipping Service Service
apiVersion: v1
kind: Service
metadata:
  name: shipping-service
  namespace: online-boutique
spec:
  selector:
    app: shipping-service
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# Catalog Service Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-service
  namespace: online-boutique
  labels:
    app: catalog-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: catalog-service
  template:
    metadata:
      labels:
        app: catalog-service
    spec:
      containers:
      - name: catalog-service
        image: "gcr.io/${PROJECT_ID}/online-boutique:${IMAGE_TAG}"
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_TYPE
          value: "catalog-service"
        - name: PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: boutique-config
        - secretRef:
            name: boutique-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Catalog Service Service
apiVersion: v1
kind: Service
metadata:
  name: catalog-service
  namespace: online-boutique
spec:
  selector:
    app: catalog-service
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# Main Boutique Coordinator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: boutique-coordinator
  namespace: online-boutique
  labels:
    app: boutique-coordinator
spec:
  replicas: 2
  selector:
    matchLabels:
      app: boutique-coordinator
  template:
    metadata:
      labels:
        app: boutique-coordinator
    spec:
      containers:
      - name: boutique-coordinator
        image: "gcr.io/${PROJECT_ID}/online-boutique:${IMAGE_TAG}"
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_TYPE
          value: "boutique-coordinator"
        - name: PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: boutique-config
        - secretRef:
            name: boutique-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Boutique Coordinator Service
apiVersion: v1
kind: Service
metadata:
  name: boutique-coordinator
  namespace: online-boutique
spec:
  selector:
    app: boutique-coordinator
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# NodePort Service for external access
apiVersion: v1
kind: Service
metadata:
  name: boutique-nodeport
  namespace: online-boutique
spec:
  type: NodePort
  selector:
    app: boutique-coordinator
  ports:
  - name: http
    port: 80
    targetPort: 8080
    nodePort: 30080
    protocol: TCP

---
# Ingress for external access (alternative to LoadBalancer)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: boutique-ingress
  namespace: online-boutique
  annotations:
    cloud.google.com/global-static-ip-name: "boutique-ip"
    networking.gke.io/managed-certificates: "boutique-ssl-cert"
    kubernetes.io/ingress.allow-http: "false"
spec:
  ingressClassName: gce
  rules:
  - host: online-boutique-gke-hackethon.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: boutique-coordinator
            port:
              number: 80

---
# Managed SSL Certificate for GKE
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: boutique-ssl-cert
  namespace: online-boutique
spec:
  domains:
    - online-boutique-gke-hackethon.com

---
# Horizontal Pod Autoscaler for Coordinator
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: boutique-coordinator-hpa
  namespace: online-boutique
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: boutique-coordinator
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for Product Manager
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: product-manager-hpa
  namespace: online-boutique
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: product-manager
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Horizontal Pod Autoscaler for Customer Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: customer-service-hpa
  namespace: online-boutique
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: customer-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Horizontal Pod Autoscaler for Payment Processor
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: payment-processor-hpa
  namespace: online-boutique
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: payment-processor
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Network Policy for security (optional)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: boutique-network-policy
  namespace: online-boutique
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: online-boutique
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx  # Allow ingress controller
  egress:
  - to: []  # Allow all egress traffic
